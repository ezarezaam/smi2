import React, { useState } from 'react';
import * as LucideIcons from '../../components/icons';

const { Plus, Edit, Trash2, Search, Eye, X, Key } = LucideIcons;

// Interface untuk data divisi
interface Division {
  id: string;
  name: string;
  description: string;
}

// Interface untuk data jabatan/posisi
interface Position {
  id: string;
  name: string;
  description: string;
}

// Interface untuk data employee
interface Employee {
  id: string;
  name: string;
  email: string;
  phone: string;
  joinDate: string;
  division: Division;
  position: Position;
  roleLevel: number; // Level 1-4 terpisah dari posisi
  status: 'active' | 'inactive' | 'on-leave';
}

const EmployeeManagement: React.FC = () => {
  // State untuk menyimpan data
  const [employees, setEmployees] = useState<Employee[]>([
    {
      id: 'EMP-001',
      name: 'John Doe',
      email: 'john.doe@example.com',
      phone: '081234567890',
      joinDate: '2023-01-15',
      division: { id: 'DIV-001', name: 'IT', description: 'Information Technology Department' },
      position: { id: 'POS-001', name: 'Software Developer', description: 'Senior Software Developer' },
      roleLevel: 4,
      status: 'active'
    },
    {
      id: 'EMP-002',
      name: 'Jane Smith',
      email: 'jane.smith@example.com',
      phone: '081234567891',
      joinDate: '2023-03-20',
      division: { id: 'DIV-002', name: 'Finance', description: 'Finance Department' },
      position: { id: 'POS-002', name: 'Accountant', description: 'Mid-level Accountant' },
      roleLevel: 3,
      status: 'active'
    },
    {
      id: 'EMP-003',
      name: 'Robert Johnson',
      email: 'robert.johnson@example.com',
      phone: '081234567892',
      joinDate: '2022-11-05',
      division: { id: 'DIV-003', name: 'HR', description: 'Human Resources Department' },
      position: { id: 'POS-003', name: 'HR Manager', description: 'Senior HR Manager' },
      roleLevel: 4,
      status: 'on-leave'
    }
  ]);

  // State untuk modal
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showResetPasswordModal, setShowResetPasswordModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [modalMode, setModalMode] = useState<'add' | 'edit' | 'view'>('add');
  const [newPassword, setNewPassword] = useState('');
  const [currentEmployee, setCurrentEmployee] = useState<Employee | null>(null);
  
  // State untuk form
  const [formData, setFormData] = useState<{
    id: string;
    name: string;
    email: string;
    phone: string;
    joinDate: string;
    division: string;
    position: string;
    roleLevel: number;
    status: string;
  }>({
    id: '',
    name: '',
    email: '',
    phone: '',
    joinDate: new Date().toISOString().split('T')[0],
    division: '',
    position: '',
    roleLevel: 1,
    status: 'active'
  });
  
  // Data divisi
  const divisions: Division[] = [
    { id: 'DIV-001', name: 'IT', description: 'Information Technology Department' },
    { id: 'DIV-002', name: 'Finance', description: 'Finance Department' },
    { id: 'DIV-003', name: 'HR', description: 'Human Resources Department' },
    { id: 'DIV-004', name: 'Marketing', description: 'Marketing Department' },
    { id: 'DIV-005', name: 'Operations', description: 'Operations Department' }
  ];
  
  // Data posisi/jabatan
  const positions: Position[] = [
    { id: 'POS-001', name: 'Software Developer', description: 'Software Developer' },
    { id: 'POS-002', name: 'Accountant', description: 'Accountant' },
    { id: 'POS-003', name: 'HR Manager', description: 'HR Manager' },
    { id: 'POS-004', name: 'Marketing Specialist', description: 'Marketing Specialist' },
    { id: 'POS-005', name: 'Operations Manager', description: 'Operations Manager' },
    { id: 'POS-006', name: 'IT Support', description: 'IT Support' },
    { id: 'POS-007', name: 'Finance Manager', description: 'Finance Manager' }
  ];
  
  // Data role levels untuk dropdown
  const roleLevelOptions = [
    { value: 1, label: 'Level 1 - Junior' },
    { value: 2, label: 'Level 2 - Associate' },
    { value: 3, label: 'Level 3 - Senior' },
    { value: 4, label: 'Level 4 - Lead' }
  ];

  // State untuk filter
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [divisionFilter, setDivisionFilter] = useState<string>('all');

  // Handler untuk menampilkan modal edit
  const handleEdit = (employee: Employee) => {
    setCurrentEmployee(employee);
    setFormData({
      id: employee.id,
      name: employee.name,
      email: employee.email,
      phone: employee.phone,
      joinDate: employee.joinDate,
      division: employee.division.id,
      position: employee.position.id,
      roleLevel: employee.roleLevel,
      status: employee.status
    });
    setShowEditModal(true);
  };

  // Handler untuk menampilkan modal delete
  const handleDelete = (employee: Employee) => {
    setCurrentEmployee(employee);
    setShowDeleteModal(true);
  };

  // Handler untuk menampilkan modal view
  const handleView = (employee: Employee) => {
    setCurrentEmployee(employee);
    setShowViewModal(true);
  };

  // Handler untuk reset password
  const handleResetPassword = (employee: Employee) => {
    setCurrentEmployee(employee);
    setNewPassword('');
    setShowResetPasswordModal(true);
  };

  // Handler untuk menampilkan modal add
  const handleAdd = () => {
    setFormData({
      id: `EMP-${String(employees.length + 1).padStart(3, '0')}`,
      name: '',
      email: '',
      phone: '',
      joinDate: new Date().toISOString().split('T')[0],
      division: '',
      position: '',
      roleLevel: 1,
      status: 'active'
    });
    setShowAddModal(true);
  };

  // Handler untuk save form
  const handleSaveAdd = () => {
    // Validasi form
    if (!formData.name || !formData.email || !formData.phone || !formData.division || !formData.position) {
      alert('Semua field harus diisi');
      return;
    }

    // Simpan data baru
    const selectedDivision = divisions.find(div => div.id === formData.division);
    const selectedPosition = positions.find(pos => pos.id === formData.position);

    if (!selectedDivision || !selectedPosition) {
      alert('Divisi atau Posisi tidak valid');
      return;
    }

    const newEmployee = {
      id: formData.id,
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      joinDate: formData.joinDate,
      division: selectedDivision,
      position: selectedPosition,
      roleLevel: formData.roleLevel,
      status: formData.status as 'active' | 'inactive' | 'on-leave'
    };

    setEmployees([...employees, newEmployee]);
    setShowAddModal(false);
  };

  // Handler untuk save edit
  const handleSaveEdit = () => {
    // Validasi form
    if (!formData.name || !formData.email || !formData.phone || !formData.division || !formData.position) {
      alert('Semua field harus diisi');
      return;
    }

    // Simpan data baru
    const selectedDivision = divisions.find(div => div.id === formData.division);
    const selectedPosition = positions.find(pos => pos.id === formData.position);

    if (!selectedDivision || !selectedPosition) {
      alert('Divisi atau Posisi tidak valid');
      return;
    }

    const updatedEmployee = {
      id: formData.id,
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      joinDate: formData.joinDate,
      division: selectedDivision,
      position: selectedPosition,
      roleLevel: formData.roleLevel,
      status: formData.status as 'active' | 'inactive' | 'on-leave'
    };

    setEmployees(employees.map(emp => emp.id === updatedEmployee.id ? updatedEmployee : emp));
    setShowEditModal(false);
  };

  // Handler untuk konfirmasi delete
  const confirmDelete = () => {
    if (currentEmployee) {
      setEmployees(employees.filter(emp => emp.id !== currentEmployee.id));
      setShowDeleteModal(false);
      setCurrentEmployee(null);
    }
  };

  // Handler untuk reset password submit
  const handleResetPasswordSubmit = () => {
    if (!newPassword) {
      alert('Password baru harus diisi');
      return;
    }
    
    if (newPassword.length < 6) {
      alert('Password minimal 6 karakter');
      return;
    }
    
    // Di implementasi nyata, ini akan memanggil API untuk reset password
    alert(`Password untuk ${currentEmployee?.name} berhasil direset!`);
    setShowResetPasswordModal(false);
  };

  // Filter employees berdasarkan pencarian dan filter
  const filteredEmployees = employees.filter(employee => {
    const matchesSearch = 
      employee.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      employee.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      employee.id.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesStatus = statusFilter === 'all' || employee.status === statusFilter;
    const matchesDivision = divisionFilter === 'all' || employee.division.id === divisionFilter;
    
    return matchesSearch && matchesStatus && matchesDivision;
  });

  // Render status badge dengan warna yang sesuai
  const renderStatusBadge = (status: 'active' | 'inactive' | 'on-leave') => {
    switch (status) {
      case 'active':
        return (
          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
            Active
          </span>
        );
      case 'inactive':
        return (
          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
            Inactive
          </span>
        );
      case 'on-leave':
        return (
          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
            On Leave
          </span>
        );
      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header dan Tombol Tambah */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div className="flex flex-col sm:flex-row gap-2">
          <div className="relative">
            <input
              type="text"
              placeholder="Cari nama, email, ID..."
              className="w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
              <Search className="h-5 w-5 text-gray-400" />
            </div>
          </div>
          <button
            onClick={handleAdd}
            className="flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            <Plus className="h-5 w-5 mr-2" />
            <span>Tambah Employee</span>
          </button>
        </div>
      </div>

      {/* Filter */}
      <div className="flex flex-wrap gap-4 bg-gray-50 p-4 rounded-lg">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">Semua Status</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
            <option value="on-leave">On Leave</option>
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Divisi</label>
          <select
            value={divisionFilter}
            onChange={(e) => setDivisionFilter(e.target.value)}
            className="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">Semua Divisi</option>
            <option value="DIV-001">IT</option>
            <option value="DIV-002">Finance</option>
            <option value="DIV-003">HR</option>
          </select>
        </div>
      </div>

      {/* Tabel Employee */}
      <div className="bg-white shadow-md rounded-lg overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ID
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Nama
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Email
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Divisi
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Jabatan
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Role Level
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredEmployees.map((employee) => (
                <tr key={employee.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {employee.id}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {employee.name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {employee.email}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {employee.division.name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {employee.position.name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    Level {employee.roleLevel}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {renderStatusBadge(employee.status)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button
                      onClick={() => handleView(employee)}
                      className="text-blue-600 hover:text-blue-900 mr-3"
                      title="Lihat Detail"
                    >
                      <Eye className="h-5 w-5" />
                    </button>
                    <button
                      onClick={() => handleEdit(employee)}
                      className="text-yellow-600 hover:text-yellow-900 mr-3"
                      title="Edit"
                    >
                      <Edit className="h-5 w-5" />
                    </button>
                    <button
                      onClick={() => handleResetPassword(employee)}
                      className="text-green-600 hover:text-green-900 mr-3"
                      title="Reset Password"
                    >
                      <Key className="h-5 w-5" />
                    </button>
                    <button
                      onClick={() => handleDelete(employee)}
                      className="text-red-600 hover:text-red-900"
                      title="Hapus"
                    >
                      <Trash2 className="h-5 w-5" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Reset Password Modal */}
      {showResetPasswordModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Reset Password</h3>
            <p className="text-gray-500 mb-4">
              Masukkan password baru untuk {currentEmployee?.name}
            </p>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Password Baru</label>
              <input
                type="password"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                placeholder="Minimal 6 karakter"
              />
            </div>
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => setShowResetPasswordModal(false)}
                className="px-4 py-2 bg-gray-100 text-gray-800 rounded-md hover:bg-gray-200"
              >
                Batal
              </button>
              <button
                onClick={handleResetPasswordSubmit}
                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
              >
                Reset Password
              </button>
            </div>
          </div>                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Status
                  </label>
                  <select
                    value={formData.status}
                    onChange={(e) => setFormData({...formData, status: e.target.value})}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="on-leave">On Leave</option>
                  </select>
                </div>
              </div>
              
              {/* Divisi & Jabatan */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Divisi *
                  </label>
                  <select
                    value={formData.division}
                    onChange={(e) => setFormData({...formData, division: e.target.value})}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                    required
                  >
                    <option value="">Pilih Divisi</option>
                    {divisions.map(div => (
                      <option key={div.id} value={div.id}>{div.name} - {div.description}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Jabatan *
                  </label>
                  <select
                    value={formData.position}
                    onChange={(e) => setFormData({...formData, position: e.target.value})}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                    required
                  >
                    <option value="">Pilih Jabatan</option>
                    {positions.map(pos => (
                      <option key={pos.id} value={pos.id}>{pos.name}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
            
            <div className="mt-6 flex justify-end space-x-3">
              <button
                onClick={() => {
                  setShowAddModal(false);
                  setShowEditModal(false);
                }}
                className="px-4 py-2 bg-gray-100 text-gray-800 rounded-md hover:bg-gray-200"
              >
                Batal
              </button>
              <button
                onClick={showAddModal ? handleSaveAdd : handleSaveEdit}
                disabled={!formData.name || !formData.email || !formData.division || !formData.position}
                className={`px-4 py-2 rounded-md ${!formData.name || !formData.email || !formData.division || !formData.position ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`}
              >
                Simpan
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* View Modal */}
      {showViewModal && currentEmployee && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 overflow-y-auto">
          <div className="bg-white rounded-lg p-6 max-w-4xl w-full my-8 mx-4">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-gray-900">Detail Employee</h3>
              <button
                onClick={() => setShowViewModal(false)}
                className="text-gray-400 hover:text-gray-500"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              <div>
                <p className="text-sm text-gray-500">ID Employee</p>
                <p className="font-medium">{currentEmployee.id}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Tanggal Bergabung</p>
                <p className="font-medium">{new Date(currentEmployee.joinDate).toLocaleDateString('id-ID')}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Nama Lengkap</p>
                <p className="font-medium">{currentEmployee.name}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Email</p>
                <p className="font-medium">{currentEmployee.email}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Nomor Telepon</p>
                <p className="font-medium">{currentEmployee.phone}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Status</p>
                <div>{renderStatusBadge(currentEmployee.status)}</div>
              </div>
              <div>
                <p className="text-sm text-gray-500">Divisi</p>
                <p className="font-medium">{currentEmployee.division.name}</p>
                <p className="text-xs text-gray-400">{currentEmployee.division.description}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Jabatan</p>
                <p className="font-medium">{currentEmployee.position.name}</p>
                <p className="text-xs text-gray-400">{currentEmployee.position.description}</p>
              </div>
            </div>
            
            <div className="mt-6 flex justify-end">
              <button
                onClick={() => setShowViewModal(false)}
                className="px-4 py-2 bg-gray-100 text-gray-800 rounded-md hover:bg-gray-200"
              >
                Tutup
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EmployeeManagement;
