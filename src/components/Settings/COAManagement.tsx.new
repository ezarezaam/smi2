import React, { useState, useEffect } from 'react';
import { COA, COACategories, COASubcategories } from '../../models/COA';
import { COAService } from '../../services/COAService';
import { Plus, Edit, Trash2, Search, Loader2 } from 'lucide-react';
import { toast } from 'react-toastify';

const COAManagement: React.FC = () => {
  const [coas, setCOAs] = useState<COA[]>([]);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [formData, setFormData] = useState<Partial<COA>>({
    code: '',
    name: '',
    category: '',
    subcategory: '',
    is_active: true,
  });
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [availableSubcategories, setAvailableSubcategories] = useState<string[]>([]);
  
  // Filtered COAs based on search term
  const filteredCOAs = coas.filter(coa => 
    coa.code?.toLowerCase().includes(searchTerm.toLowerCase()) || 
    coa.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    coa.category?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    coa.subcategory?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Load COAs
  const loadCOAs = async () => {
    setIsLoading(true);
    try {
      const { data, error } = await COAService.getAll();
      
      if (error) throw error;
      
      if (data) {
        setCOAs(data);
      }
    } catch (error) {
      console.error('Error loading COAs:', error);
      toast.error('Failed to load Chart of Accounts');
    } finally {
      setIsLoading(false);
    }
  };

  // Handle form input change
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData(prev => ({ ...prev, [name]: checked }));
    } else if (name === 'category') {
      // When category changes, reset subcategory and update available subcategories
      setFormData(prev => ({ 
        ...prev, 
        [name]: value,
        subcategory: '' // Reset subcategory
      }));
      
      // Update available subcategories based on selected category
      if (value && COASubcategories[value]) {
        setAvailableSubcategories(COASubcategories[value]);
      } else {
        setAvailableSubcategories([]);
      }
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  // Handle form submit
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // Validasi panjang kode COA (maksimal 10 karakter)
      if (formData.code && formData.code.length > 10) {
        toast.error('Kode COA maksimal 10 karakter');
        setIsSubmitting(false);
        return;
      }

      // Check if code already exists
      const codeExists = await COAService.isCodeExists(
        formData.code?.toUpperCase() || '',
        editingId || undefined
      );
      
      if (codeExists) {
        toast.error('Kode COA sudah ada');
        setIsSubmitting(false);
        return;
      }

      if (editingId) {
        // Update existing COA
        const { error } = await COAService.update(editingId, formData);
        if (error) {
          // Casting error ke any untuk mengakses properti code dan message
          const err = error as any;
          if (err.code === '22001') {
            toast.error('Kode COA terlalu panjang, maksimal 10 karakter');
            return;
          }
          throw error;
        }
        toast.success('COA berhasil diperbarui');
      } else {
        // Create new COA
        const { error } = await COAService.create({
          ...formData,
          code: formData.code?.toUpperCase() || '',
        } as COA);
        if (error) {
          // Casting error ke any untuk mengakses properti code dan message
          const err = error as any;
          if (err.code === '22001') {
            toast.error('Kode COA terlalu panjang, maksimal 10 karakter');
            return;
          } else if (err.code === '23505' && err.message?.includes('chart_of_accounts_pkey')) {
            toast.error('ID COA sudah ada, silakan coba lagi');
            return;
          } else if (err.code === '23505' && err.message?.includes('chart_of_accounts_code_key')) {
            toast.error('Kode COA sudah ada');
            return;
          }
          throw error;
        }
        toast.success('COA berhasil dibuat');
      }
      
      resetForm();
      setShowForm(false);
      loadCOAs();
    } catch (error) {
      console.error('Error saving COA:', error);
      toast.error('Gagal menyimpan COA');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle edit
  const handleEdit = (coa: COA) => {
    if (!coa.id) return;
    
    setEditingId(coa.id.toString());
    setFormData({
      code: coa.code,
      name: coa.name,
      category: coa.category,
      subcategory: coa.subcategory,
      is_active: coa.is_active ?? true,
    });
    
    // Update available subcategories based on selected category
    if (coa.category && COASubcategories[coa.category]) {
      setAvailableSubcategories(COASubcategories[coa.category]);
    }
    
    setShowForm(true);
  };

  // Handle delete
  const handleDelete = async (id: string) => {
    if (window.confirm('Apakah Anda yakin ingin menghapus COA ini?')) {
      try {
        const { error } = await COAService.delete(id);
        if (error) throw error;
        
        toast.success('COA berhasil dihapus');
        loadCOAs();
      } catch (error) {
        console.error('Error deleting COA:', error);
        toast.error('Gagal menghapus COA');
      }
    }
  };

  // Reset form
  const resetForm = () => {
    setEditingId(null);
    setFormData({
      code: '',
      name: '',
      category: '',
      subcategory: '',
      is_active: true,
    });
    setAvailableSubcategories([]);
  };
  
  // Handle add new
  const handleAddNew = () => {
    resetForm();
    setShowForm(true);
  };



  // Initial load
  useEffect(() => {
    loadCOAs();
  }, []);

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-semibold text-gray-800">Chart of Accounts</h1>
        <div className="flex space-x-2">
          {!showForm && (
            <button
              onClick={handleAddNew}
              className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              <Plus className="h-5 w-5 mr-1" />
              Tambah Baru
            </button>
          )}
        </div>
      </div>
      
      {/* Search Bar */}
      <div className="relative w-full md:w-96 mb-4">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Search className="h-5 w-5 text-gray-400" />
        </div>
        <input
          type="text"
          placeholder="Cari COA..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="pl-10 pr-4 py-2 border border-gray-300 rounded-md w-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      {/* Form */}
      {showForm && (
        <div className="bg-white shadow-md rounded-lg overflow-hidden mb-6">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-800">
              {editingId ? 'Edit COA' : 'Tambah COA Baru'}
            </h2>
          </div>
          <form onSubmit={handleSubmit} className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="code" className="block text-sm font-medium text-gray-700 mb-1">
                  Kode <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="code"
                  id="code"
                  value={formData.code}
                  onChange={handleChange}
                  maxLength={10}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>

              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                  Nama <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="name"
                  id="name"
                  value={formData.name}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>

              <div>
                <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
                  Kategori <span className="text-red-500">*</span>
                </label>
                <select
                  name="category"
                  id="category"
                  value={formData.category}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                >
                  <option value="">Pilih Kategori</option>
                  {COACategories.map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label htmlFor="subcategory" className="block text-sm font-medium text-gray-700 mb-1">
                  Subkategori <span className="text-red-500">*</span>
                </label>
                <select
                  name="subcategory"
                  id="subcategory"
                  value={formData.subcategory}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                  disabled={!formData.category}
                >
                  <option value="">Pilih Subkategori</option>
                  {availableSubcategories.map((subcategory) => (
                    <option key={subcategory} value={subcategory}>
                      {subcategory}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <div className="flex items-center">
                  <input
                    id="is_active"
                    name="is_active"
                    type="checkbox"
                    checked={formData.is_active}
                    onChange={handleChange}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                  <label htmlFor="is_active" className="ml-2 block text-sm text-gray-900">
                    Aktif
                  </label>
                </div>
              </div>
            </div>

            <div className="mt-6 flex justify-end space-x-3">
              <button
                type="button"
                onClick={() => {
                  resetForm();
                  setShowForm(false);
                }}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                Batal
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="inline-block animate-spin h-4 w-4 mr-2" />
                    Loading...
                  </>
                ) : (
                  <>
                    {editingId ? 'Update' : 'Simpan'}
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Table */}
      <div className="bg-white shadow-md rounded-lg overflow-hidden">
        {isLoading ? (
          <div className="text-center py-8">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
            <p className="mt-2">Loading...</p>
          </div>
        ) : filteredCOAs.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            {searchTerm ? 'Tidak ada data yang sesuai dengan pencarian' : 'Belum ada data COA'}
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Kode</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nama</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Kategori</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subkategori</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Aksi</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredCOAs.map((coa) => (
                  <tr key={coa.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">{coa.code}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{coa.name}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{coa.category}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{coa.subcategory}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        coa.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                        {coa.is_active ? 'Aktif' : 'Tidak Aktif'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEdit(coa)}
                          className="text-indigo-600 hover:text-indigo-900"
                        >
                          <Edit className="h-5 w-5" />
                        </button>
                        <button
                          onClick={() => coa.id && handleDelete(coa.id)}
                          className="text-red-600 hover:text-red-900"
                        >
                          <Trash2 className="h-5 w-5" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
};

export default COAManagement;
